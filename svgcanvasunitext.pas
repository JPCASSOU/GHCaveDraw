unit SVGCanvasUnitExt;

// 04/04/2014: Reprise du développement et refonte
// DEPRECATED

{$INCLUDE CompilationParameters.inc}
{$DEFINE SVG_MODULE_INDEPENDANT}
{$UNDEF SVG_MODULE_INDEPENDANT}
interface
uses
  SysUtils,
  Classes,
  {$IFNDEF SVG_MODULE_INDEPENDANT}
    StructuresDonnees,
    Common,
  {$ENDIF}
  Graphics;
  {$IFDEF SVG_MODULE_INDEPENDANT}
   type TPoint2Df = record
     X: double;
     Y: double;
   end;
  {$ENDIF}
type

{ TSVGCanvas }

 TSVGCanvas = class(TCanvas)
    constructor Create;
    destructor  Destroy; override;
  private
    FSVGFile: string;
    FCommentaire: string;
    FNbWrittenLines: integer;
    FScale: double;
    FXMin,
    FXMax,
    FYMin,
    FYMax : Double;
    // pour SVG uniquement: définition de la chaine de caractères de description
    // du crayon et de la brosse
    FPenStr  : string;
    FBrushStr: string;
  public
    function  InitializeDocument(const QFileName: string): boolean;
    procedure FinalizeDocument;
    // limites du dessin
    procedure SetDrawingBounds(const X1, Y1, X2, Y2: Double);
    // définition des couleurs et fontes
    //****************************
    procedure SaveToFile;
    // définition de commentaires
    procedure WriteCommentaire(const s: string);
    procedure WriteCommand(const s: string);
    // définition de couches
    procedure BeginLayer(const LayerName: string);
    procedure EndLayer(const LayerName: string);
    // routines de dessin
    procedure DrawPoint(const X,Y: Double);
    procedure DrawLine(const X1, Y1, X2, Y2: Double);
    procedure DrawCircle(const XC, YC, R: double);
    procedure DrawPolylign(const Points: array of TPoint2Df);
    procedure DrawPolygon(const Points: array of TPoint2Df);
    procedure DrawBorderedPolygon(const Points: array of TPoint2Df);
    procedure DrawText(const X,Y: Double; const Text: string);
    function  SVGColor(const C:TColor):string;
    //*)
    //*******************

    procedure SetCommentaire(const S: string);
    procedure SetScale(const S: double);



end;

implementation
var
  pSVGFILE: TextFile;

procedure DisplayMsg(const Str: string);
begin
  ;//WriteLn(Str);
end;
procedure WriteLine(const S: string);
begin
  WriteLn(pSVGFILE, s);
end;

constructor TSVGCanvas.Create;
begin
 inherited Create;
 DisplayMsg(Format('%s.Create',[ClassName]));
 try

 except
 end;
end;
destructor TSVGCanvas.Destroy;
begin
 DisplayMsg(Format('%s.Free',[ClassName]));
 inherited Destroy;
end;
//**** Définition des pinceaux et couleurs
function  TSVGCanvas.SVGColor(const C:TColor):string;
var
  r,g,b: byte;
begin
  R :=Red(C); G:=Green(C); B:=Blue(C);
  Result:=Format('#%.2X%.2X%.2X',[R,G,B]);
  //affichermessage(Result);
end;



procedure TSVGCanvas.SetCommentaire(const S: string);
begin
  FCommentaire := S;
end;

procedure TSVGCanvas.SetScale(const S: double);
begin
  FScale := S;
end;

//*******************
procedure TSVGCanvas.SetDrawingBounds(const X1, Y1, X2, Y2: Double);
begin
  AfficherMessage(Format('%s.SetDrawingBounds: (%.2f, %.2f)->(%.2f, %.2f)', [ClassName,X1, Y1, X2, Y2]));
  FXMin:=X1;
  FYMin:=Y1;
  FXMax:=X2;
  FYMax:=Y2;
end;
procedure TSVGCanvas.WriteCommentaire(const s: string);
begin
  WriteLine(Format('<!-- %s -->',[s]));
end;
procedure TSVGCanvas.WriteCommand(const s: string);
begin
  WriteLine(Trim(S));
end;

function  TSVGCanvas.InitializeDocument(const QFileName: string): boolean;
begin
  Result:=False;
  FSVGFile := QFileName;
  FNbWrittenLines:=0;
  assignFile(pSVGFILE, FSVGFile);
  try
    ReWrite(pSVGFILE);
    //-------------------------------
    // écriture de l'en tête ici
    // ------------------------------
    WriteLine('<?xml version ="1.0"?>');
    WriteLine('<!-- SVG File generated by GHTopo');
    WriteLine(Format(' File    : %s',[FSVGFile]));
    WriteLine(Format(' Date    : %s',[DateToStr(Now)]));
    WriteLine(Format(' Comments: %s',[FCommentaire]));
    WriteLine('-->');


    // le dessin
    WriteLine(Format('<svg width="%f" height="%f" viewBox="%f %f %f %f">',
                     [FXMax - FXMin,
                      FYMax - FYMin,
                      FXMin, FYMin, FXMax, FYMax]));


    Result:=True;
  except
    DisplayMsg('Error initializing text file');
    CloseFile(pSVGFILE);
  end;
end;
procedure TSVGCanvas.FinalizeDocument;
begin
  try
    WriteLine('</svg>');
  finally
    CloseFile(pSVGFILE);
  end;
end;
//********* Définition de couches
procedure TSVGCanvas.BeginLayer(const LayerName: string);
begin
  WriteLine(Format('<!-- Begin Layer: %s -->',[LayerName]));
  WriteLine(Format('<g id="%s">',[LayerName]));
end;
procedure TSVGCanvas.EndLayer(const LayerName: string);
begin
  WriteLine('</g>');
  WriteLine(Format('<!-- End Layer: %s -->',[LayerName]));
end;
//********* routines de dessin
procedure TSVGCanvas.DrawPoint(const X,Y: Double);
begin
 ;
end;
procedure TSVGCanvas.DrawCircle(const XC, YC, R: double);
begin
;
end;
procedure TSVGCanvas.DrawLine(const X1, Y1, X2, Y2: Double);
begin

  WriteLine(Format('   <line x1="%f" y1="%f" x2="%f" y2="%f" style="%s"/>',
                   [X1, -Y1,
                    X2, -Y2,
                    FPenStr]));
end;
// dessin d'une polyligne
procedure TSVGCanvas.DrawPolylign(const Points: array of TPoint2Df);
var
  i: integer;
begin
  if (High(Points)<1) then Exit;
  (*
  for i:=1 to High(Points) do
  //*)
end;
// dessin d'un polygone plein sans bordure
procedure TSVGCanvas.DrawPolygon(const Points: array of TPoint2Df);
var
  i: integer;
begin
  if (High(Points)<1) then Exit;
  //WriteLine('newpath');

  WriteLine(Format('   <polygon style="fill-rule: nonzero; fill: %s; stroke: none"',
                   [SVGColor(Brush.Color)]));
  WriteLine(Format('      points="%f, %f ',[Points[0].X, -Points[0].Y]));

  for i:=1 to High(Points) do
    WriteLine(Format('              %f, %f ',[Points[i].X, -Points[i].Y]));
  WriteLine('   "/>');

end;
// dessin d'un polygone plein avec bordure
procedure TSVGCanvas.DrawBorderedPolygon(const Points: array of TPoint2Df);
var
  i: integer;
begin
  if (High(Points)<1) then Exit;
end;
procedure TSVGCanvas.DrawText(const X,Y: Double; const Text: string);
begin
  WriteLine(Format('<text x="%f" y="%f">%s</text>',[X, -Y, Text]));
end;
//*****************************
procedure TSVGCanvas.SaveToFile;
begin
;
end;


end.

